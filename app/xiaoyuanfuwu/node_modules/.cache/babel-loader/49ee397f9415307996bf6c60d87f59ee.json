{"remainingRequest":"F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\node_modules\\babel-loader\\lib\\index.js!F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\src\\components\\navigation\\components\\Navigation.js","dependencies":[{"path":"F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\src\\components\\navigation\\components\\Navigation.js","mtime":1548914458000},{"path":"F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Routes from '../routes';\nimport { getKey, matches } from '../utils';\nexport default (function (keyName) {\n  return {\n    name: 'navigation',\n    abstract: true,\n    props: {},\n    data: function data() {\n      return {\n        routes: Routes\n      };\n    },\n    computed: {},\n    watch: {\n      routes: function routes(val) {\n        for (var key in this.cache) {\n          if (!matches(val, key)) {\n            var vnode = this.cache[key];\n            vnode && vnode.componentInstance.$destroy();\n            delete this.cache[key];\n          }\n        }\n      }\n    },\n    created: function created() {\n      this.cache = {};\n    },\n    destroyed: function destroyed() {\n      for (var key in this.cache) {\n        var vnode = this.cache[key];\n        vnode && vnode.componentInstance.$destroy();\n      }\n    },\n    render: function render() {\n      var vnode = this.$slots.default ? this.$slots.default[0] : null;\n\n      if (vnode) {\n        vnode.key = vnode.key || (vnode.isComment ? 'comment' : vnode.tag); // prevent vue-router reuse component\n\n        var key = getKey(this.$route, keyName);\n\n        if (vnode.key.indexOf(key) === -1) {\n          vnode.key = \"__navigation-\".concat(key, \"-\").concat(vnode.key);\n        }\n\n        if (this.cache[key]) {\n          if (vnode.key === this.cache[key].key) {\n            // restore vnode from cache\n            vnode.componentInstance = this.cache[key].componentInstance;\n          } else {\n            // replace vnode to cache\n            this.cache[key].componentInstance.$destroy();\n            this.cache[key] = vnode;\n          }\n        } else {\n          // cache new vnode\n          this.cache[key] = vnode;\n        }\n\n        vnode.data.keepAlive = true;\n      }\n\n      return vnode;\n    }\n  };\n});",{"version":3,"sources":["F:\\xiaoyuanfuwu\\app\\xiaoyuanfuwu\\src\\components\\navigation\\components\\Navigation.js"],"names":["Routes","getKey","matches","keyName","name","abstract","props","data","routes","computed","watch","val","key","cache","vnode","componentInstance","$destroy","created","destroyed","render","$slots","default","isComment","tag","$route","indexOf","keepAlive"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,UAAhC;AAEA,gBAAe,UAAAC,OAAO,EAAI;AACxB,SAAO;AACLC,IAAAA,IAAI,EAAE,YADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,KAAK,EAAE,EAHF;AAILC,IAAAA,IAAI,EAAE;AAAA,aAAO;AACXC,QAAAA,MAAM,EAAER;AADG,OAAP;AAAA,KAJD;AAOLS,IAAAA,QAAQ,EAAE,EAPL;AAQLC,IAAAA,KAAK,EAAE;AACLF,MAAAA,MADK,kBACEG,GADF,EACO;AACV,aAAK,IAAMC,GAAX,IAAkB,KAAKC,KAAvB,EAA8B;AAC5B,cAAI,CAACX,OAAO,CAACS,GAAD,EAAMC,GAAN,CAAZ,EAAwB;AACtB,gBAAME,KAAK,GAAG,KAAKD,KAAL,CAAWD,GAAX,CAAd;AACAE,YAAAA,KAAK,IAAIA,KAAK,CAACC,iBAAN,CAAwBC,QAAxB,EAAT;AACA,mBAAO,KAAKH,KAAL,CAAWD,GAAX,CAAP;AACD;AACF;AACF;AATI,KARF;AAmBLK,IAAAA,OAnBK,qBAmBK;AACR,WAAKJ,KAAL,GAAa,EAAb;AACD,KArBI;AAsBLK,IAAAA,SAtBK,uBAsBO;AACV,WAAK,IAAMN,GAAX,IAAkB,KAAKC,KAAvB,EAA8B;AAC5B,YAAMC,KAAK,GAAG,KAAKD,KAAL,CAAWD,GAAX,CAAd;AACAE,QAAAA,KAAK,IAAIA,KAAK,CAACC,iBAAN,CAAwBC,QAAxB,EAAT;AACD;AACF,KA3BI;AA4BLG,IAAAA,MA5BK,oBA4BI;AACP,UAAML,KAAK,GAAG,KAAKM,MAAL,CAAYC,OAAZ,GAAsB,KAAKD,MAAL,CAAYC,OAAZ,CAAoB,CAApB,CAAtB,GAA+C,IAA7D;;AACA,UAAIP,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACF,GAAN,GAAYE,KAAK,CAACF,GAAN,KAAcE,KAAK,CAACQ,SAAN,GAAkB,SAAlB,GAA8BR,KAAK,CAACS,GAAlD,CAAZ,CADS,CAET;;AACA,YAAMX,GAAG,GAAGX,MAAM,CAAC,KAAKuB,MAAN,EAAcrB,OAAd,CAAlB;;AACA,YAAIW,KAAK,CAACF,GAAN,CAAUa,OAAV,CAAkBb,GAAlB,MAA2B,CAAC,CAAhC,EAAmC;AACjCE,UAAAA,KAAK,CAACF,GAAN,0BAA4BA,GAA5B,cAAmCE,KAAK,CAACF,GAAzC;AACD;;AACD,YAAI,KAAKC,KAAL,CAAWD,GAAX,CAAJ,EAAqB;AACnB,cAAIE,KAAK,CAACF,GAAN,KAAc,KAAKC,KAAL,CAAWD,GAAX,EAAgBA,GAAlC,EAAuC;AACrC;AACAE,YAAAA,KAAK,CAACC,iBAAN,GAA0B,KAAKF,KAAL,CAAWD,GAAX,EAAgBG,iBAA1C;AACD,WAHD,MAGO;AACL;AACA,iBAAKF,KAAL,CAAWD,GAAX,EAAgBG,iBAAhB,CAAkCC,QAAlC;AACA,iBAAKH,KAAL,CAAWD,GAAX,IAAkBE,KAAlB;AACD;AACF,SATD,MASO;AACL;AACA,eAAKD,KAAL,CAAWD,GAAX,IAAkBE,KAAlB;AACD;;AACDA,QAAAA,KAAK,CAACP,IAAN,CAAWmB,SAAX,GAAuB,IAAvB;AACD;;AACD,aAAOZ,KAAP;AACD;AArDI,GAAP;AAuDD,CAxDD","sourcesContent":["import Routes from '../routes';\nimport { getKey, matches } from '../utils';\n\nexport default keyName => {\n  return {\n    name: 'navigation',\n    abstract: true,\n    props: {},\n    data: () => ({\n      routes: Routes\n    }),\n    computed: {},\n    watch: {\n      routes(val) {\n        for (const key in this.cache) {\n          if (!matches(val, key)) {\n            const vnode = this.cache[key];\n            vnode && vnode.componentInstance.$destroy();\n            delete this.cache[key];\n          }\n        }\n      }\n    },\n    created() {\n      this.cache = {};\n    },\n    destroyed() {\n      for (const key in this.cache) {\n        const vnode = this.cache[key];\n        vnode && vnode.componentInstance.$destroy();\n      }\n    },\n    render() {\n      const vnode = this.$slots.default ? this.$slots.default[0] : null;\n      if (vnode) {\n        vnode.key = vnode.key || (vnode.isComment ? 'comment' : vnode.tag);\n        // prevent vue-router reuse component\n        const key = getKey(this.$route, keyName);\n        if (vnode.key.indexOf(key) === -1) {\n          vnode.key = `__navigation-${key}-${vnode.key}`;\n        }\n        if (this.cache[key]) {\n          if (vnode.key === this.cache[key].key) {\n            // restore vnode from cache\n            vnode.componentInstance = this.cache[key].componentInstance;\n          } else {\n            // replace vnode to cache\n            this.cache[key].componentInstance.$destroy();\n            this.cache[key] = vnode;\n          }\n        } else {\n          // cache new vnode\n          this.cache[key] = vnode;\n        }\n        vnode.data.keepAlive = true;\n      }\n      return vnode;\n    }\n  };\n};\n"]}]}